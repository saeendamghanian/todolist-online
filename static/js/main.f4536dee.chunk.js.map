{"version":3,"sources":["Item.js","ToDoList.js","AddTask.js","DialogBox.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","task","id","text","created_date","status","className","type","onChange","statusToUpdate","todos","find","axios","put","toString","then","res","document","querySelector","innerHTML","catch","err","toggleComplete","onClick","getTaskId","delete","deleteTask","ToDoList","map","key","AddTask","state","userInput","addTaskToDB","post","addButtonClick","value","event","setState","target","this","React","Component","DialogBox","taskToUpdate","editedTask","console","log","updateDate","Date","now","toISOString","style","display","editTask","taskId","App","taskStatus","intervalIsSet","getDataFromDB","get","data","interval","setInterval","clearInterval","Intl","DateTimeFormat","weekday","format","month","day","year","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4536dee.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nconst Item = props => {\n  const { id, text, created_date, status } = props.task;\n\n  const deleteTask = id => {\n    axios\n      .delete(`https://sd-todolist-server.herokuapp.com/task/${id}`)\n      .then(res => {\n        document.querySelector(\"#process-result\").innerHTML = \"Task deleted!\";\n      })\n      .catch(err => {\n        document.querySelector(\"#process-result\").innerHTML = err;\n      });\n  };\n\n  const toggleComplete = id => {\n    let statusToUpdate = props.todos.find(task => task.id === id);\n\n    statusToUpdate.status =\n      statusToUpdate.status === \"pending\" ? \"completed\" : \"pending\";\n    axios\n      .put(`https://sd-todolist-server.herokuapp.com/task/status/${id}`, {\n        status: statusToUpdate.status.toString()\n      })\n      .then(res => {\n        document.querySelector(\n          \"#process-result\"\n        ).innerHTML = `Task ${statusToUpdate.status}!`;\n      })\n      .catch(err => {\n        document.querySelector(\"#process-result\").innerHTML = err;\n      });\n  };\n\n  return (\n    <li>\n      <div className=\"task-context\">\n        <label id=\"custome-checkbox-container\">\n          <input\n            type=\"checkbox\"\n            className=\"default-checkbox\"\n            onChange={() => toggleComplete(id)}\n          />\n          <span className=\"custom-checkbox\"></span>\n          {id} - {text} - {created_date} - {status}\n        </label>\n      </div>\n      <div className=\"task-btns\">\n        <button onClick={() => props.getTaskId(id)}>Edit</button>\n        <button onClick={() => deleteTask(id)}>delete</button>\n      </div>\n    </li>\n  );\n};\n\nexport default Item;\n","import React from \"react\";\nimport Item from \"./Item\";\nimport PropTypes from \"prop-types\";\n\nconst ToDoList = props => {\n  return (\n    <div id=\"task-container\">\n      <ul>\n        {props.todos.map(task => (\n          <Item key={task.id} task={task} {...props} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nToDoList.propTypes = {\n  todos: PropTypes.array.isRequired\n  // toggleComplete: PropTypes.func.isRequired\n};\n\nexport default ToDoList;\n","import React from \"react\";\nimport axios from \"axios\";\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\n\nclass AddTask extends React.Component {\n  state = {\n    userInput: null\n  };\n\n  addTaskToDB = task => {\n    if (task !== null) {\n      axios\n        .post(\"https://sd-todolist-server.herokuapp.com/tasks\", {\n          text: task.toString()\n        })\n        .then(res => {\n          document.querySelector(\"#process-result\").innerHTML = \"Task added!\";\n        })\n        .catch(err => {\n          document.querySelector(\"#process-result\").innerHTML = err;\n        });\n    } else {\n      document.querySelector(\"#process-result\").innerHTML =\n        \"The field is empty!\";\n    }\n  };\n\n  addButtonClick = () => {\n    this.addTaskToDB(this.state.userInput);\n    document.querySelector(\"#user-input\").value = \"\";\n  };\n\n  render() {\n    return (\n      <div className=\"add-new-task\">\n        <input\n          type=\"text\"\n          id=\"user-input\"\n          className=\"text-input\"\n          onChange={event => this.setState({ userInput: event.target.value })}\n        />\n        <label>\n          <button onClick={this.addButtonClick} className=\"add-btn\">\n            <i>\n              <AddRoundedIcon />\n            </i>\n          </button>\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from \"react\";\nimport axios from \"axios\";\n\nconst DialogBox = props => {\n  const editTask = id => {\n    let taskToUpdate = document.querySelector(\"#edited-input-value\").value;\n    let editedTask = props.todos.find(task => task.id === id);\n    console.log(taskToUpdate + id);\n    let updateDate = new Date(Date.now()).toISOString();\n\n    axios\n      .put(`https://sd-todolist-server.herokuapp.com/task/${id}`, {\n        text: taskToUpdate.toString(),\n        status: editedTask.status,\n        created_date: updateDate\n      })\n      .then(res => {\n        document.querySelector(\"#process-result\").innerHTML = \"Task updated!\";\n      })\n      .catch(err => {\n        document.querySelector(\"#process-result\").innerHTML = err;\n      });\n    document.querySelector(\"#edit-dialog-bg\").style.display = \"none\";\n    document.querySelector(\"#edit-dialog\").style.display = \"none\";\n    document.querySelector(\"#edited-input-value\").value = \"\";\n    // }\n  };\n\n  const closeDialogBox = () => {\n    document.querySelector(\"#edit-dialog-bg\").style.display = \"none\";\n    document.querySelector(\"#edit-dialog\").style.display = \"none\";\n  };\n\n  return (\n    <div id=\"edit-dialog-bg\">\n      <div id=\"container-edit-dialog\">\n        <div id=\"edit-dialog\">\n          <h2>Edit</h2>\n          <input id=\"edited-input-value\" className=\"text-input\" type=\"text\" />\n          <div>\n            <div id=\"dialog-bx-btns\">\n              <button onClick={() => editTask(props.taskId)}>Done</button>\n              <button onClick={closeDialogBox}>Cancel</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DialogBox;\n","import React from \"react\";\nimport ToDoList from \"./ToDoList\";\n// import Search from \"./Search\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport AddTask from \"./AddTask\";\nimport DialogBox from \"./DialogBox\";\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    taskStatus: \"\",\n    intervalIsSet: false,\n    taskId: \"\"\n  };\n\n  componentDidMount() {\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  getDataFromDB = () => {\n    axios\n      .get(\"https://sd-todolist-server.herokuapp.com/tasks\")\n      .then(res => this.setState({ todos: res.data }));\n  };\n\n  getTaskId = id => {\n    this.setState({ taskId: id });\n\n    document.querySelector(\"#edit-dialog-bg\").style.display = \"flex\";\n    document.querySelector(\"#edit-dialog\").style.display = \"flex\";\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"wrapper\">\n          <h1>\n            {new Intl.DateTimeFormat(\"en-US\", { weekday: \"long\" }).format(\n              new Date()\n            )}\n          </h1>\n          <h5>\n            {new Intl.DateTimeFormat(\"en-US\", {\n              month: \"short\",\n              day: \"numeric\",\n              year: \"numeric\"\n            }).format(new Date())}\n          </h5>\n          <p id=\"process-result\"></p>\n          {/* <Search /> */}\n          <AddTask />\n          <ToDoList todos={this.state.todos} getTaskId={this.getTaskId} />\n          <DialogBox taskId={this.state.taskId} todos={this.state.todos} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}